# -*- coding: utf-8 -*-
"""Repair_Test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u1q3IjGM3ek_BRpTmo7re4MoIVRH6af9
"""

import pandas as pd
import matplotlib.pyplot as plt
import os

# Constants
INPUT_FILE = "taxonomic_data.csv"
OUTPUT_STATS_FILE = "phylum_summary.csv"
OUTPUT_PLOT_FILE = "phylum_species_count.png"

# Functions
def analyze_taxonomic_data(input_file):
    """
    Analyze taxonomic data from the given CSV file.

    Args:
        input_file (str): Path to the input CSV file.

    Returns:
        pd.DataFrame: Summary statistics for each taxonomic phylum.
    """
    try:
        # Load the dataset
        data = pd.read_csv(input_file)

        # Check for required columns
        required_columns = ["phylum", "species", "count"]
        if not all(col in data.columns for col in required_columns):
            raise ValueError(f"Input file must contain the following columns: {', '.join(required_columns)}")

        # Drop rows with missing values in required columns
        data = data.dropna(subset=required_columns)

        # Calculate total species count and average count per species for each phylum
        summary = data.groupby("phylum").agg(
            Total_Species_Count=("count", "sum"),
            Average_Count_Per_Species=("count", "mean")
        ).reset_index()

        return summary
    except Exception as e:
        print(f"Error processing the file: {e}")
        return pd.DataFrame()


def save_summary_to_csv(summary, output_file):
    """
    Save the summary statistics to a CSV file.

    Args:
        summary (pd.DataFrame): The summary statistics DataFrame.
        output_file (str): Path to the output CSV file.
    """
    try:
        summary.to_csv(output_file, index=False)
        print(f"Summary saved to {output_file}")
    except Exception as e:
        print(f"Error saving the summary to CSV: {e}")


def plot_species_count(summary, output_file):
    """
    Generate and save a bar chart for total species count per phylum.

    Args:
        summary (pd.DataFrame): The summary statistics DataFrame.
        output_file (str): Path to the output plot file.
    """
    try:
        plt.figure(figsize=(10, 6))
        plt.bar(summary["phylum"], summary["Total_Species_Count"], alpha=0.7)
        plt.xlabel("Phylum")
        plt.ylabel("Total Species Count")
        plt.title("Total Species Count per Phylum")
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        plt.savefig(output_file)
        print(f"Bar chart saved to {output_file}")
    except Exception as e:
        print(f"Error generating the bar chart: {e}")


def main():
    """Main function to run the analysis and save results."""
    # Ensure the input file exists
    if not os.path.exists(INPUT_FILE):
        print(f"Input file {INPUT_FILE} not found.")
        return

    # Analyze the data
    summary = analyze_taxonomic_data(INPUT_FILE)

    if summary.empty:
        print("No data to process. Exiting.")
        return

    # Save the results
    save_summary_to_csv(summary, OUTPUT_STATS_FILE)

    # Generate the bar chart
    plot_species_count(summary, OUTPUT_PLOT_FILE)


if __name__ == "__main__":
    main()

